-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.articulos_o_paginas
(
    id serial NOT NULL,
    nombre text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT articulos_o_paginas_pkey PRIMARY KEY (id),
    CONSTRAINT articulos_o_paginas_nombre_key UNIQUE (nombre)
);

CREATE TABLE IF NOT EXISTS public.documento_articulo
(
    id_documento integer NOT NULL,
    id_articulo integer NOT NULL,
    CONSTRAINT documento_articulo_pkey PRIMARY KEY (id_documento, id_articulo)
);

CREATE TABLE IF NOT EXISTS public.documentos
(
    id serial NOT NULL,
    nombre text COLLATE pg_catalog."default" NOT NULL,
    referencia text COLLATE pg_catalog."default" NOT NULL,
    articulo_o_pagina text COLLATE pg_catalog."default",
    CONSTRAINT documentos_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.keywords
(
    id serial NOT NULL,
    palabra character varying(50) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT keywords_pkey PRIMARY KEY (id),
    CONSTRAINT keywords_palabra_key UNIQUE (palabra)
);

CREATE TABLE IF NOT EXISTS public.pqrs
(
    id serial NOT NULL,
    id_usuario integer,
    tipo text COLLATE pg_catalog."default" NOT NULL,
    descripcion text COLLATE pg_catalog."default" NOT NULL,
    estado text COLLATE pg_catalog."default" DEFAULT 'pendiente'::text,
    CONSTRAINT pqrs_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.pregunta_documento
(
    id_pregunta integer NOT NULL,
    id_documento integer NOT NULL,
    CONSTRAINT pregunta_documento_pkey PRIMARY KEY (id_pregunta, id_documento)
);

CREATE TABLE IF NOT EXISTS public.pregunta_keyword
(
    id_pregunta integer NOT NULL,
    id_keyword integer NOT NULL,
    CONSTRAINT pregunta_keyword_pkey PRIMARY KEY (id_pregunta, id_keyword)
);

CREATE TABLE IF NOT EXISTS public.preguntas
(
    id serial NOT NULL,
    pregunta text COLLATE pg_catalog."default" NOT NULL,
    contexto text COLLATE pg_catalog."default" NOT NULL,
    respuesta_rapida text COLLATE pg_catalog."default",
    CONSTRAINT preguntas_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.preguntas_bajas
(
    id serial NOT NULL,
    id_usuario integer,
    pregunta text COLLATE pg_catalog."default" NOT NULL,
    fecha timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT preguntas_bajas_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.preguntas_repetidas
(
    id serial NOT NULL,
    pregunta text COLLATE pg_catalog."default" NOT NULL,
    id_pregunta_original integer,
    CONSTRAINT preguntas_repetidas_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.rendimiento_modelo
(
    id serial NOT NULL,
    id_usuario integer,
    pregunta_mas_cercana text COLLATE pg_catalog."default",
    contexto text COLLATE pg_catalog."default",
    similitud real,
    pregunta_usuario text COLLATE pg_catalog."default",
    respuesta_modelo text COLLATE pg_catalog."default",
    fecha_y_hora timestamp without time zone,
    tiempo_respuesta double precision,
    CONSTRAINT rendimiento_modelo_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.usuarios
(
    id serial NOT NULL,
    numero_celular_id text COLLATE pg_catalog."default" NOT NULL,
    nombre_completo text COLLATE pg_catalog."default" NOT NULL,
    programa_que_pertenece text COLLATE pg_catalog."default" NOT NULL,
    correo_electronico text COLLATE pg_catalog."default" NOT NULL,
    numero_celular_1 text COLLATE pg_catalog."default",
    aceptacion_de_politicas boolean NOT NULL,
    CONSTRAINT usuarios_pkey PRIMARY KEY (id),
    CONSTRAINT usuarios_numero_celular_id_key UNIQUE (numero_celular_id)
);

CREATE TABLE IF NOT EXISTS public.usuarios_bloqueados
(
    numero_celular_id text COLLATE pg_catalog."default" NOT NULL,
    motivo_bloqueo text COLLATE pg_catalog."default" NOT NULL,
    cantidad_mensajes integer NOT NULL,
    fecha_bloqueo timestamp without time zone DEFAULT now(),
    CONSTRAINT usuarios_bloqueados_pkey PRIMARY KEY (numero_celular_id)
);

ALTER TABLE IF EXISTS public.documento_articulo
    ADD CONSTRAINT documento_articulo_id_articulo_fkey FOREIGN KEY (id_articulo)
    REFERENCES public.articulos_o_paginas (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.documento_articulo
    ADD CONSTRAINT documento_articulo_id_documento_fkey FOREIGN KEY (id_documento)
    REFERENCES public.documentos (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.pqrs
    ADD CONSTRAINT pqrs_id_usuario_fkey FOREIGN KEY (id_usuario)
    REFERENCES public.usuarios (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.pregunta_documento
    ADD CONSTRAINT pregunta_documento_id_documento_fkey FOREIGN KEY (id_documento)
    REFERENCES public.documentos (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.pregunta_documento
    ADD CONSTRAINT pregunta_documento_id_pregunta_fkey FOREIGN KEY (id_pregunta)
    REFERENCES public.preguntas (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.pregunta_keyword
    ADD CONSTRAINT pregunta_keyword_id_keyword_fkey FOREIGN KEY (id_keyword)
    REFERENCES public.keywords (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.pregunta_keyword
    ADD CONSTRAINT pregunta_keyword_id_pregunta_fkey FOREIGN KEY (id_pregunta)
    REFERENCES public.preguntas (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.preguntas_bajas
    ADD CONSTRAINT preguntas_bajas_id_usuario_fkey FOREIGN KEY (id_usuario)
    REFERENCES public.usuarios (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.preguntas_repetidas
    ADD CONSTRAINT preguntas_repetidas_id_pregunta_original_fkey FOREIGN KEY (id_pregunta_original)
    REFERENCES public.preguntas (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.rendimiento_modelo
    ADD CONSTRAINT rendimiento_modelo_id_usuario_fkey FOREIGN KEY (id_usuario)
    REFERENCES public.usuarios (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

END;